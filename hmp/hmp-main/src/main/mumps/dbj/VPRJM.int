VPRJM ;SLC/KCM -- Set up Meta Data for VPR Indexing
 ;;1.0;JSON DATA STORE;;Sep 01, 2012
 ;
SETUP ;
 K ^VPRMETA
 S ^VPRMETA("version")="1.0 Build 26"
 ;
 D INDEXES
 D DOMAINS
 D TEMPLTS
 ;
 ; "every" index is special index that references all the UID's for a patient
 S ^VPRMETA("index","every")="every"
 S ^VPRMETA("index","every","common","levels")=0
 S ^VPRMETA("index","every","common","method")="every"
 ;
 S ^VPRMETA("codes","med","productFormCode")=""
 S ^VPRMETA("codes","med","medStatus")=""
 S ^VPRMETA("codes","med","medType")=""
 S ^VPRMETA("codes","med","products[]","ingredientCode")=""
 S ^VPRMETA("codes","med","products[]","drugClassCode")=""
 S ^VPRMETA("codes","med","products[]","suppliedCode")=""
 S ^VPRMETA("codes","med","products[]","ingredientRole")=""
 S ^VPRMETA("codes","med","dosages[]","routeCode")=""
 S ^VPRMETA("codes","med","dosages[]","bodySite")=""
 S ^VPRMETA("codes","med","fills[]","fillStatus")=""
 ;
 L +^VPRPT("PID"):2 E  QUIT
 I '$G(^VPRPT("PID")) S ^VPRPT("PID")=0 ; initialize PID counter
 I '$D(^VPRPTX("count","patient","patient")) S ^VPRPTX("count","patient","patient")=0
 L -^VPRPT("PID")
 Q
INDEXES ; -- build meta data for all indexes
 K ^VPRMETA("index")
 K ^VPRMETA("collection")
 D BLDIDXS("IDXLIST","attr")
 D BLDIDXS("IDXTALLY","tally")
 D BLDIDXS("IDXTIME","time")
 D BLDIDXS("IDXATTR","attr")
 ;D BLDIDXS("IDXMATCH","match")
 Q
BLDIDXS(TAG,IDXTYPE) ; build meta data for all indexes of a given type
 N I,X
 S I=0 F  S I=I+1,X=$P($T(@TAG+I^VPRJMDX),";;",2,99) Q:X="zzzzz"  I $E(X)]" " D BLDIDX(TAG,I,IDXTYPE)
 Q
BLDIDX(TAG,LINE,IDXTYPE) ; place information for single index into ^VPRMETA
 N INDEX,IDXNAME,GROUP,I,X,C,VAL,COLL,SORT,SETIF,FIELDS,SUBFLDS,FTYPE,MATCH,ERROR
 S IDXNAME=$$TRIM^XLFSTR($P($P($T(@TAG+LINE^VPRJMDX),";;",2,99)," "))
 S SUBFLDS=0,FIELDS=0,SORT="",SETIF="",COLL=0,ERROR=0
 F  S LINE=LINE+1,X=$P($T(@TAG+LINE^VPRJMDX),";;",2,99) Q:X="zzzzz"  Q:$E(X)]" "  D
 . S GROUP=$$TRIM^XLFSTR($P(X,":")),X=$P(X,":",2,99)
 . I GROUP="collections" D  Q
 . . F I=1:1:$L(X,",") S VAL=$$TRIM^XLFSTR($P(X,",",I)) I $L(VAL) S COLL(VAL)=""
 . I GROUP="sort" S SORT=$$TRIM^XLFSTR(X) Q
 . I GROUP="setif" S SETIF=$$TRIM^XLFSTR(X) Q
 . I GROUP="values" D  Q
 . .  F I=1:1:$L(X,",") S VAL=VAL=$$TRIM^XLFSTR($P(X,",",I)) I $L(VAL) S MATCH(VAL)=""
 . I GROUP="fields" D  Q
 . . F I=1:1:$L(X,",") S VAL=$$TRIM^XLFSTR($P(X,",",I)) I $L(VAL) D
 . . . Q:VAL="<none>"
 . . . S FIELDS=FIELDS+1
 . . . S FIELDS(I)=$$TRIM^XLFSTR($P(VAL,"/")) ; name
 . . . I '$L(FIELDS(I)) S ERROR=1 W !,"Error: field name in ",IDXNAME
 . . . S FIELDS(I,"collate")=$$TRIM^XLFSTR($P(VAL,"/",2))
 . . . I '$L(FIELDS(I,"collate")) S FIELDS(I,"collate")=$S(IDXTYPE="tally":"p",1:"s")
 . . . S FIELDS(I,"ifNull")=$$TRIM^XLFSTR($P(VAL,"/",3))
 . . . I VAL["[]" S VAL=$P(VAL,"[]") I $L(VAL),'$D(SUBFLDS(VAL)) D
 . . . . S SUBFLDS=SUBFLDS+1,SUBFLDS(SUBFLDS)=VAL,SUBFLDS(VAL)=""
 . I $E(GROUP,1,7)="fields." D  Q
 . . S C=$P(GROUP,".",2)
 . . F I=1:1:$L(X,",") S VAL=$$TRIM^XLFSTR($P(X,",",I)) I $L(VAL) S FIELDS(C,I)=VAL
 ;
 S INDEX(IDXNAME)=IDXNAME
 F I=1:1:FIELDS S INDEX(IDXNAME,"common","collate",I)=FIELDS(I,"collate")
 F I=1:1:FIELDS S INDEX(IDXNAME,"common","field",FIELDS(I))=I
 F I=1:1:FIELDS S INDEX(IDXNAME,"common","ifNull",I)=FIELDS(I,"ifNull")
 S INDEX(IDXNAME,"common","method")=IDXTYPE
 S INDEX(IDXNAME,"common","levels")=FIELDS
 I $L($G(SORT)),(SORT'="<none>") S INDEX(IDXNAME,"common","order")=SORT
 I $L($G(SETIF)) S INDEX(IDXNAME,"common","setif")=SETIF
 F I=1:1:SUBFLDS S INDEX(IDXNAME,"common","subkey",SUBFLDS(I))=I
 ;
 S C="" F  S C=$O(COLL(C)) Q:C=""  D
 . S ^VPRMETA("collection",C,"index",IDXNAME)=""
 . F I=1:1:FIELDS D
 . . K FTYPE
 . . I $D(FIELDS(C))>1 D:$D(FIELDS(C,I)) BLDFTYP^VPRJPQU(FIELDS(C,I),.FTYPE) I 1
 . . E  D BLDFTYP^VPRJPQU(FIELDS(I),.FTYPE)
 . . I $D(FTYPE) M INDEX(IDXNAME,"collection",C,I,"ftype")=FTYPE
 . . S INDEX(IDXNAME,"collection",C,I,"collate")=FIELDS(I,"collate")
 . . S INDEX(IDXNAME,"collection",C,I,"field")=$S($D(FIELDS(C))>1:$G(FIELDS(C,I)),1:FIELDS(I))
 . . S INDEX(IDXNAME,"collection",C,I,"ifNull")=$S($D(FIELDS(C))>1:$S($D(FIELDS(C,I)):FIELDS(I,"ifNull"),1:""),1:FIELDS(I,"ifNull"))
 . . S MATCH="" F  S MATCH=$O(MATCH(MATCH)) Q:MATCH=""  S ^VPRMETA("match",C,FIELDS(I),MATCH,IDXNAME)=""
 M ^VPRMETA("index")=INDEX
 Q
DOMAINS ; -- Map collections to domains
 N I,X,COLL,DOMAIN
 S I=0 F  S I=I+1,X=$P($T(DOMAIN+I^VPRJMDX),";;",2,99) Q:X="zzzzz"  D
 . S COLL=$P(X,":"),DOMAIN=$P(X,":",2)
 . S ^VPRMETA("collection",COLL,"domain")=DOMAIN
 Q
 ;
TEMPLTS ; -- Set the meta-information for the templates
 N I,J,X,COLL,TYPE,NAME,FIELDS
 K ^VPRMETA("template")
 S I=1 F  S I=I+1,X=$P($T(TEMPLATE+I^VPRJMDT),";",3,99) Q:X="zzzzz"  D
 . S COLL=$P(X,","),TYPE=$P(X,",",2),NAME=$P(X,",",3),FIELDS=$P(X,",",4,99)
 . S ^VPRMETA("template",COLL,NAME,"exclude")=+(TYPE="exclude")
 . F J=1:1:$L(FIELDS,",") S ^VPRMETA("template",COLL,NAME,"fields",$P(FIELDS,",",J))=""
 Q